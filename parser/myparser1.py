import sqlparse
import gensim

# Load the pre-trained word2vec model
w2v_model = gensim.models.KeyedVectors.load_word2vec_format("cc.en.300.bin", binary=True)

# Input SQL query generated by the machine learning model
ml_query = "SELECT name, age FROM users WHERE age > 30"

# Input database schema
schema = {
    "users": ["name", "age", "address"],
    "customers": ["first_name", "last_name", "email", "phone"]
}

# Parse the SQL query using sqlparse
parsed_query = sqlparse.parse(ml_query)[0]

# Identify the table and column names in the parsed query using word embeddings
for token in parsed_query.tokens:
    if token.ttype is sqlparse.tokens.Name:
        token_text = token.value.lower()
        if token_text in schema:
            # The token is a table name
            token_pos = token.get_position()
            context = ml_query[max(token_pos[0]-10, 0):min(token_pos[1]+10, len(ml_query))]
            for word in context.split():
                if word in w2v_model and w2v_model.similarity(token_text, word) > 0.5:
                    # The word is a possible synonym of the table name
                    possible_synonym = word.lower()
                    if possible_synonym in schema:
                        # Replace the table name with its synonym
                        token.value = possible_synonym
                        break
        else:
            # The token is a column name
            table_name = token.get_parent_name()
            if table_name in schema:
                token_pos = token.get_position()
                context = ml_query[max(token_pos[0]-10, 0):min(token_pos[1]+10, len(ml_query))]
                for word in context.split():
                    if word in w2v_model and w2v_model.similarity(token_text, word) > 0.5:
                        # The word is a possible synonym of the column name
                        possible_synonym = None
                        for column in schema[table_name]:
                            if w2v_model.similarity(column, word) > 0.5:
                                # The word is semantically similar to a column name in the schema
                                possible_synonym = column
                                break
                        if possible_synonym:
                            # Replace the column name with its synonym
                            column_index = schema[table_name].index(token_text)
                            possible_column = schema[table_name][column_index]
                            if possible_column != token_text:
                                token.value = possible_column
                                break

# Print the modified SQL query
print(str(parsed_query))
